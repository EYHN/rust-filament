name: Build Release
on:
  push:
    tags:
      - v*
jobs:
  create-release:
    runs-on: 'ubuntu-20.04'
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          omitBody: true
          prerelease: true
          token: ${{ secrets.ACCESS_TOKEN }}
          owner: EYHN
          repo: filament-binaries
  build:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: macos-11
            target: x86_64-apple-darwin
          - os: windows-2019
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
            submodules: true
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libglu1-mesa-dev ninja-build libxi-dev ninja-build libc++-11-dev libc++abi-11-dev
      - name: Install LLVM (Windows) # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@v1
        if: runner.os == 'Windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH (Windows)
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: runner.os == 'Windows'
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja
      - name: Install Rust target ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
      - name: Build ${{ matrix.target }}
        env:
          FILAMENT_BUILD_CACHE_DIR: ${{ runner.temp }}/release
          FILAMENT_BUILD_DISABLE_CACHE: ON
        run: |
          cargo build --release -p filament-sys --target ${{ matrix.target }}
      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ runner.temp }}/release/*
          artifactContentType: application/gzip
          artifactErrorsFailBuild: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: true
          token: ${{ secrets.ACCESS_TOKEN }}
          owner: EYHN
          repo: filament-binaries
